// storage-batching.middleware.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { Middleware, MiddlewareAPI, NextFunction, StorageAction } from '../utils/middleware-module'

export interface BatchingMiddlewareOptions {
  batchSize?: number
  batchDelay?: number
}

interface BatchItem {
  action: StorageAction
  resolve: (value: any) => void
  reject: (error: any) => void
  timestamp: number
}

export const batchingMiddleware = (options: BatchingMiddlewareOptions = {}): Middleware => {
  const batchSize = options.batchSize ?? 10
  const batchDelay = options.batchDelay ?? 10 // –£–º–µ–Ω—å—à–∏–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –±–∞—Ç—á–∏–Ω–≥–∞

  const queues = new Map<string, BatchItem[]>()
  const timeouts = new Map<string, NodeJS.Timeout>()

  const shouldBatch = (action: StorageAction): boolean => {
    return action.type === 'set' || action.type === 'update'
  }

  const getSegmentKey = (action: StorageAction): string => {
    return `${action.type}_${action.key?.toString() || 'default'}`
  }

  const mergeActions = (actions: StorageAction[]): StorageAction[] => {
    const merged = new Map<string, StorageAction>()

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    for (const action of actions) {
      const key = `${action.type}_${action.key?.toString() || 'default'}`
      merged.set(key, action) // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
    }

    return Array.from(merged.values())
  }

  const clearTimeout = (segment: string): void => {
    const timeout = timeouts.get(segment)
    if (timeout) {
      globalThis.clearTimeout(timeout)
      timeouts.delete(segment)
    }
  }

  const setTimeout = (segment: string, callback: () => void): void => {
    const timeout = globalThis.setTimeout(callback, batchDelay)
    timeouts.set(segment, timeout)
  }

  const processBatch = async (segment: string, api: MiddlewareAPI, next: NextFunction): Promise<void> => {
    const queue = queues.get(segment)
    if (!queue || queue.length === 0) return

    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ —Ç–∞–π–º–µ—Ä
    queues.delete(segment)
    clearTimeout(segment)

    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      const actions = queue.map((item) => item.action)
      const mergedActions = mergeActions(actions)

      console.log(`üîÑ Batching ${segment}: ${queue.length} actions -> ${mergedActions.length} merged`, {
        original: actions.map((a) => ({ type: a.type, key: a.key?.toString(), value: a.value })),
        merged: mergedActions.map((a) => ({ type: a.type, key: a.key?.toString(), value: a.value })),
      })

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ merged actions
      for (const mergedAction of mergedActions) {
        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º merged –¥–µ–π—Å—Ç–≤–∏–µ
          const result = await next(mergedAction)

          // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ queue items, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–æ–º—É merged action
          const matchingItems = queue.filter((item) => item.action.type === mergedAction.type && item.action.key?.toString() === mergedAction.key?.toString())

          // –í—Å–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ items –ø–æ–ª—É—á–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç merged –æ–ø–µ—Ä–∞—Ü–∏–∏
          matchingItems.forEach((item) => item.resolve(result))
        } catch (error) {
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–∏—Å—ã
          const matchingItems = queue.filter((item) => item.action.type === mergedAction.type && item.action.key?.toString() === mergedAction.key?.toString())
          matchingItems.forEach((item) => item.reject(error))
        }
      }
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã
      queue.forEach((item) => item.reject(error))
    }
  }

  const addToQueue = async (action: StorageAction, api: MiddlewareAPI, next: NextFunction): Promise<any> => {
    return new Promise((resolve, reject) => {
      const segment = getSegmentKey(action)

      let queue = queues.get(segment)
      if (!queue) {
        queue = []
        queues.set(segment, queue)
      }

      queue.push({
        action,
        resolve,
        reject,
        timestamp: Date.now(),
      })

      clearTimeout(segment)

      if (queue.length >= batchSize) {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
        setImmediate(() => processBatch(segment, api, next))
      } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        setTimeout(segment, () => processBatch(segment, api, next))
      }
    })
  }

  return {
    name: 'batching',
    setup: () => {},
    cleanup: async () => {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
      timeouts.forEach((timeout) => globalThis.clearTimeout(timeout))
      timeouts.clear()
      queues.clear()
    },
    reducer: (api: MiddlewareAPI) => (next: NextFunction) => async (action: StorageAction) => {
      if (!shouldBatch(action)) {
        return next(action)
      }

      return addToQueue(action, api, next)
    },
  }
}
