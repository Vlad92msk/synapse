// analyze-modules.js
import fs from 'fs'

import path from 'path'

// –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–¥—É–ª–µ–π
function analyzeModuleSize(modulePath) {
  try {
    const content = fs.readFileSync(modulePath, 'utf8');
    const lines = content.split('\n').length;
    const chars = content.length;
    const imports = (content.match(/import.*from/g) || []).length;
    const exports = (content.match(/export/g) || []).length;

    return {
      path: modulePath,
      size: (chars / 1024).toFixed(2) + ' KB',
      lines,
      imports,
      exports,
      hasHeavyImports: checkHeavyImports(content)
    };
  } catch (error) {
    return { path: modulePath, error: error.message };
  }
}

function checkHeavyImports(content) {
  const heavyPatterns = [
    'rxjs/operators',
    'lodash',
    'moment',
    'date-fns',
    'immer',
    'reselect'
  ];

  return heavyPatterns.filter(pattern => content.includes(pattern));
}

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
const sourceModules = [
  'src/api/index.ts',
  'src/core/index.ts',
  'src/react/index.ts',
  'src/reactive/index.ts',
  'src/utils/index.ts',
  'src/index.ts'
];

console.log('üîç –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:');
console.log('='.repeat(50));

sourceModules.forEach(module => {
  if (fs.existsSync(module)) {
    const analysis = analyzeModuleSize(module);
    console.log(`üìÅ ${module}:`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${analysis.size}`);
    console.log(`   –°—Ç—Ä–æ–∫–∏: ${analysis.lines}`);
    console.log(`   –ò–º–ø–æ—Ä—Ç—ã: ${analysis.imports}`);
    console.log(`   –≠–∫—Å–ø–æ—Ä—Ç—ã: ${analysis.exports}`);
    if (analysis.hasHeavyImports.length > 0) {
      console.log(`   ‚ö†Ô∏è  –¢—è–∂–µ–ª—ã–µ –∏–º–ø–æ—Ä—Ç—ã: ${analysis.hasHeavyImports.join(', ')}`);
    }
    console.log('');
  }
});

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
const distModules = [
  'dist/core/index.js',
  'dist/api/index.js',
  'dist/reactive/index.js',
  'dist/react/index.js',
  'dist/utils/index.js'
];

console.log('üì¶ –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:');
console.log('='.repeat(50));

distModules.forEach(module => {
  if (fs.existsSync(module)) {
    const stats = fs.statSync(module);
    const content = fs.readFileSync(module, 'utf8');

    // –ò—â–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ
    const hasReact = content.includes('React') || content.includes('useState');
    const hasRxJS = content.includes('rxjs') || content.includes('Observable');
    const hasLargeObjects = content.match(/\{[^}]{500,}\}/g);

    console.log(`üìÅ ${module}:`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${(stats.size / 1024).toFixed(2)} KB`);
    console.log(`   React –∫–æ–¥: ${hasReact ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}`);
    console.log(`   RxJS –∫–æ–¥: ${hasRxJS ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}`);
    console.log(`   –ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã: ${hasLargeObjects?.length || 0}`);
    console.log('');
  }
});

// –¢–æ–ø —Å—Ç—Ä–æ–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤ –±–∞–Ω–¥–ª–µ
console.log('üîç –ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö —Ç—è–∂–µ–ª—ã—Ö —á–∞—Å—Ç–µ–π –≤ full bundle:');
if (fs.existsSync('dist/bundles/synapse-full.js')) {
  const fullBundle = fs.readFileSync('dist/bundles/synapse-full.js', 'utf8');
  const lines = fullBundle.split('\n');

  const heavyLines = lines
    .map((line, index) => ({ line: line.trim(), index, length: line.length }))
    .filter(item => item.length > 200)
    .sort((a, b) => b.length - a.length)
    .slice(0, 10);

  heavyLines.forEach(item => {
    console.log(`–°—Ç—Ä–æ–∫–∞ ${item.index}: ${item.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`   ${item.line.substring(0, 100)}...`);
  });
}
