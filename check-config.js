// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
import fs from 'fs';
import path from 'path';

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...\n');

// –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
const tsupConfigContent = fs.readFileSync('./tsup.config.ts', 'utf8');

// –ò–∑–≤–ª–µ–∫–∞–µ–º entry –∏–∑ tsup.config.ts
const entryMatch = tsupConfigContent.match(/entry:\s*{([^}]*)}/s);
const entryEntries = [];
if (entryMatch) {
  const entryContent = entryMatch[1];
  const matches = entryContent.matchAll(/(\w+):\s*['"]([^'"]*)['"]/g);
  for (const match of matches) {
    entryEntries.push(match[1]);
  }
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º external –∏–∑ tsup.config.ts
const externalMatch = tsupConfigContent.match(/external:\s*\[([^\]]*)\]/);
const externalDeps = [];
if (externalMatch) {
  const matches = externalMatch[1].matchAll(/['"]([^'"]*)['"]/g);
  for (const match of matches) {
    externalDeps.push(match[1]);
  }
}

console.log('üì¶ TSUP ENTRY:');
entryEntries.forEach(entry => {
  const exportPath = entry === 'index' ? '.' : `./${entry}`;
  const hasExport = packageJson.exports && packageJson.exports[exportPath];
  console.log(`  ${entry.padEnd(10)} ‚Üí ${hasExport ? '‚úÖ' : '‚ùå'} exports["${exportPath}"]`);
});

console.log('\nüîó EXTERNAL DEPENDENCIES:');
externalDeps.forEach(dep => {
  const inPeer = packageJson.peerDependencies && packageJson.peerDependencies[dep];
  const inDeps = packageJson.dependencies && packageJson.dependencies[dep];
  const inDev = packageJson.devDependencies && packageJson.devDependencies[dep];

  console.log(`  ${dep.padEnd(12)} ‚Üí ${inPeer ? '‚úÖ peer' : '‚ùå peer'} ${inDeps ? '‚ö†Ô∏è deps' : '‚úÖ no-deps'} ${inDev ? '‚ÑπÔ∏è dev' : ''}`);
});

console.log('\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:');
if (fs.existsSync('./dist')) {
  entryEntries.forEach(entry => {
    const jsFile = `./dist/${entry}.js`;
    const cjsFile = `./dist/${entry}.cjs`;
    const dtsFile = `./dist/${entry}.d.ts`;
    const dctsFile = `./dist/${entry}.d.cts`;

    console.log(`  ${entry.padEnd(10)}:`);
    console.log(`    ${fs.existsSync(jsFile) ? '‚úÖ' : '‚ùå'} ${jsFile}`);
    console.log(`    ${fs.existsSync(cjsFile) ? '‚úÖ' : '‚ùå'} ${cjsFile}`);
    console.log(`    ${fs.existsSync(dtsFile) ? '‚úÖ' : '‚ùå'} ${dtsFile}`);
    console.log(`    ${fs.existsSync(dctsFile) ? '‚úÖ' : '‚ùå'} ${dctsFile}`);
  });
} else {
  console.log('  ‚ùå –ü–∞–ø–∫–∞ dist/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: yarn build');
}

console.log('\n‚ö†Ô∏è  –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ dependencies vs peerDependencies
const problematicDeps = [];
if (packageJson.dependencies) {
  Object.keys(packageJson.dependencies).forEach(dep => {
    if (externalDeps.includes(dep)) {
      problematicDeps.push(dep);
    }
  });
}

if (problematicDeps.length > 0) {
  console.log('  ‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ dependencies, –Ω–æ external –≤ tsup:');
  problematicDeps.forEach(dep => {
    console.log(`     - ${dep} (–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –≤ peerDependencies)`);
  });
} else {
  console.log('  ‚úÖ –í—Å–µ external –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
